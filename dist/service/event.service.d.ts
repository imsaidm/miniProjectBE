export declare class EventService {
    createEvent(organizerId: number, data: any): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import("../generated/prisma").$Enums.EventStatus;
        organizerId: number;
        title: string;
        description: string;
        location: string;
        category: import("../generated/prisma").$Enums.EventCategory;
        bannerImage: string | null;
        startAt: Date;
        endAt: Date;
        basePriceIDR: number | null;
        totalSeats: number | null;
        availableSeats: number | null;
    }>;
    updateEvent(eventId: number, organizerId: number, data: any): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import("../generated/prisma").$Enums.EventStatus;
        organizerId: number;
        title: string;
        description: string;
        location: string;
        category: import("../generated/prisma").$Enums.EventCategory;
        bannerImage: string | null;
        startAt: Date;
        endAt: Date;
        basePriceIDR: number | null;
        totalSeats: number | null;
        availableSeats: number | null;
    }>;
    deleteEvent(eventId: number, organizerId: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import("../generated/prisma").$Enums.EventStatus;
        organizerId: number;
        title: string;
        description: string;
        location: string;
        category: import("../generated/prisma").$Enums.EventCategory;
        bannerImage: string | null;
        startAt: Date;
        endAt: Date;
        basePriceIDR: number | null;
        totalSeats: number | null;
        availableSeats: number | null;
    }>;
    listEvents(params: any): Promise<{
        organizer: {
            rating: number;
            reviewCount: number;
            name: string | null;
            id: number;
            profileImg: string | null;
        };
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import("../generated/prisma").$Enums.EventStatus;
        organizerId: number;
        title: string;
        description: string;
        location: string;
        category: import("../generated/prisma").$Enums.EventCategory;
        bannerImage: string | null;
        startAt: Date;
        endAt: Date;
        basePriceIDR: number | null;
        totalSeats: number | null;
        availableSeats: number | null;
    }[]>;
    getOrganizerEvents(organizerId: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import("../generated/prisma").$Enums.EventStatus;
        organizerId: number;
        title: string;
        description: string;
        location: string;
        category: import("../generated/prisma").$Enums.EventCategory;
        bannerImage: string | null;
        startAt: Date;
        endAt: Date;
        basePriceIDR: number | null;
        totalSeats: number | null;
        availableSeats: number | null;
    }[]>;
    getEventDetails(eventId: number): Promise<{
        organizer: {
            rating: number;
            reviewCount: number;
            name: string | null;
            id: number;
            profileImg: string | null;
        };
        reviews: {
            id: number;
            createdAt: Date;
            userId: number;
            eventId: number;
            rating: number;
            comment: string | null;
        }[];
        ticketTypes: {
            name: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            eventId: number;
            totalSeats: number;
            availableSeats: number;
            priceIDR: number;
        }[];
        vouchers: {
            id: number;
            createdAt: Date;
            code: string;
            discountType: import("../generated/prisma").$Enums.DiscountType;
            discountValue: number;
            eventId: number;
            organizerId: number;
            startsAt: Date;
            endsAt: Date;
            maxUses: number | null;
            usedCount: number;
            isActive: boolean;
        }[];
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import("../generated/prisma").$Enums.EventStatus;
        organizerId: number;
        title: string;
        description: string;
        location: string;
        category: import("../generated/prisma").$Enums.EventCategory;
        bannerImage: string | null;
        startAt: Date;
        endAt: Date;
        basePriceIDR: number | null;
        totalSeats: number | null;
        availableSeats: number | null;
    }>;
    createTicketType(eventId: number, data: any): Promise<{
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        eventId: number;
        totalSeats: number;
        availableSeats: number;
        priceIDR: number;
    }>;
    updateTicketType(ticketTypeId: number, organizerId: number, data: any): Promise<{
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        eventId: number;
        totalSeats: number;
        availableSeats: number;
        priceIDR: number;
    }>;
    deleteTicketType(ticketTypeId: number, organizerId: number): Promise<{
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        eventId: number;
        totalSeats: number;
        availableSeats: number;
        priceIDR: number;
    }>;
    createTicketTypeForEvent(eventId: number, organizerId: number, data: any): Promise<{
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        eventId: number;
        totalSeats: number;
        availableSeats: number;
        priceIDR: number;
    }>;
}
declare const _default: EventService;
export default _default;
//# sourceMappingURL=event.service.d.ts.map